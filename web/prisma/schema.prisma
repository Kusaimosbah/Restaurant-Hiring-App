generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String
  name                    String
  role                    Role
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  emailVerifiedAt         DateTime?
  failedLoginCount        Int                      @default(0)
  lastLoginAt             DateTime?
  lockedUntil             DateTime?
  phone                   String?
  emailVerificationTokens EmailVerificationToken[]
  receivedMessages        Message[]                @relation("ReceivedMessages")
  sentMessages            Message[]                @relation("SentMessages")
  passwordResetTokens     PasswordResetToken[]
  refreshTokens           RefreshToken[]
  restaurant              Restaurant?
  workerProfile           WorkerProfile?

  @@map("users")
}

model Restaurant {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  phone               String?
  email               String?
  businessType        String?              // NEW: Type of restaurant (cafe, fine dining, etc.)
  cuisineType         String?              // NEW: Type of cuisine served
  websiteUrl          String?              // NEW: Restaurant website
  logoUrl             String?
  ownerId             String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relations
  address             Address?             // NEW: Relation to detailed address
  locations           Location[]           // NEW: Relation to multiple locations
  photos              RestaurantPhoto[]    // NEW: Relation to photo gallery
  paymentInfo         PaymentInfo?         // NEW: Relation to payment information
  
  // Existing relations
  applications        Application[]
  jobs                Job[]
  onboardingDocuments OnboardingDocument[]
  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reviewsReceived     ReviewRestaurant[]
  reviewsGiven        ReviewWorker[]
  shiftAssignments    ShiftAssignment[]

  @@map("restaurants")
}

// NEW: Detailed address model
model Address {
  id            String     @id @default(cuid())
  street        String
  city          String
  state         String
  zipCode       String
  country       String     @default("United States")
  latitude      Float?
  longitude     Float?
  restaurantId  String     @unique
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("addresses")
  @@index([restaurantId])
}

// NEW: Multiple locations model
model Location {
  id            String     @id @default(cuid())
  name          String
  street        String
  city          String
  state         String
  zipCode       String
  country       String     @default("United States")
  phone         String?
  email         String?
  isMainLocation Boolean    @default(false)
  latitude      Float?
  longitude     Float?
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("locations")
  @@index([restaurantId])
}

// NEW: Photo gallery model
model RestaurantPhoto {
  id            String     @id @default(cuid())
  url           String
  caption       String?
  sortOrder     Int        @default(0)
  type          PhotoType  @default(INTERIOR)
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("restaurant_photos")
  @@index([restaurantId])
}

// NEW: Payment information model
model PaymentInfo {
  id                String     @id @default(cuid())
  stripeCustomerId  String?
  stripeAccountId   String?
  bankAccountLast4  String?
  cardLast4         String?
  isVerified        Boolean    @default(false)
  restaurantId      String     @unique
  restaurant        Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("payment_info")
  @@index([restaurantId])
}

model WorkerProfile {
  id                String             @id @default(cuid())
  bio               String?
  experience        String?
  skills            String[]
  hourlyRate        Float?
  availability      String?
  userId            String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  profilePictureUrl String?
  resumeUrl         String?
  applications      Application[]
  availabilitySlots AvailabilitySlot[]
  reviewsGiven      ReviewRestaurant[]
  reviewsReceived   ReviewWorker[]
  shiftAssignments  ShiftAssignment[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("worker_profiles")
}

model Job {
  id               String            @id @default(cuid())
  title            String
  description      String
  requirements     String?
  hourlyRate       Float
  startDate        DateTime
  endDate          DateTime
  status           JobStatus         @default(ACTIVE)
  maxWorkers       Int               @default(1)
  restaurantId     String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  applications     Application[]
  restaurant       Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  shiftAssignments ShiftAssignment[]

  @@map("jobs")
}

model Application {
  id              String            @id @default(cuid())
  message         String?
  status          ApplicationStatus @default(PENDING)
  appliedAt       DateTime          @default(now())
  respondedAt     DateTime?
  responseNote    String?
  jobId           String
  workerId        String
  restaurantId    String
  coverLetterUrl  String?
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  restaurant      Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker          WorkerProfile     @relation(fields: [workerId], references: [id], onDelete: Cascade)
  messages        Message[]
  shiftAssignment ShiftAssignment?

  @@unique([jobId, workerId])
  @@map("applications")
}

model ShiftAssignment {
  id            String        @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  status        String        @default("SCHEDULED")
  notes         String?
  applicationId String        @unique
  jobId         String
  workerId      String
  restaurantId  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  job           Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker        WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("shift_assignments")
}

model ReviewWorker {
  id           String        @id @default(cuid())
  rating       Int
  comment      String?
  isPublic     Boolean       @default(true)
  workerId     String
  restaurantId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker       WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("reviews_worker")
}

model ReviewRestaurant {
  id           String        @id @default(cuid())
  rating       Int
  comment      String?
  isPublic     Boolean       @default(true)
  restaurantId String
  workerId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker       WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("reviews_restaurant")
}

model OnboardingDocument {
  id           String     @id @default(cuid())
  name         String
  documentType String
  filePath     String
  isVerified   Boolean    @default(false)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("onboarding_documents")
}

model AvailabilitySlot {
  id        String        @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean       @default(true)
  workerId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  worker    WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("availability_slots")
}

model Message {
  id            String       @id @default(cuid())
  content       String
  isRead        Boolean      @default(false)
  senderId      String
  receiverId    String
  applicationId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  application   Application? @relation(fields: [applicationId], references: [id])
  receiver      User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender        User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  expiresAt DateTime
  revoked   Boolean   @default(false)
  revokedAt DateTime?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerificationToken {
  id        String    @id @default(cuid())
  token     String    @unique
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  token     String    @unique
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

enum Role {
  RESTAURANT_OWNER
  WORKER
}

enum JobStatus {
  DRAFT
  ACTIVE
  FILLED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

// NEW: Photo type enum
enum PhotoType {
  INTERIOR
  EXTERIOR
  FOOD
  STAFF
  MENU
  OTHER
}