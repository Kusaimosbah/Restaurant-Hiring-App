generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String
  name                    String
  role                    Role
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  emailVerifiedAt         DateTime?
  failedLoginCount        Int                      @default(0)
  lastLoginAt             DateTime?
  lockedUntil             DateTime?
  phone                   String?
  emailVerificationTokens EmailVerificationToken[]
  receivedMessages        Message[]                @relation("ReceivedMessages")
  sentMessages            Message[]                @relation("SentMessages")
  passwordResetTokens     PasswordResetToken[]
  refreshTokens           RefreshToken[]
  restaurant              Restaurant?
  workerProfile           WorkerProfile?
  notifications           Notification[]
  notificationPreference  NotificationPreference?
  notificationDevices     NotificationDevice[]
  trainingProgress        TrainingProgress[]

  @@map("users")
}

model Restaurant {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  phone               String?
  email               String?
  ownerId             String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  logoUrl             String?
  businessType        String?
  cuisineType         String?
  websiteUrl          String?
  address             Address?
  locations           Location[]
  photos              RestaurantPhoto[]
  paymentInfo         PaymentInfo?
  owner               User                 @relation(fields: [ownerId], references: [id])
  jobs                Job[]
  applications        Application[]
  shiftAssignments    ShiftAssignment[]
  reviewsToWorkers    ReviewWorker[]
  reviewsFromWorkers  ReviewRestaurant[]

  @@map("restaurants")
}

model Address {
  id           String     @id @default(cuid())
  street       String
  city         String
  state        String
  zipCode      String
  country      String
  latitude     Float?
  longitude    Float?
  restaurantId String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
  @@map("addresses")
}

model Location {
  id           String     @id @default(cuid())
  name         String
  street       String
  city         String
  state        String
  zipCode      String
  country      String     @default("United States")
  latitude     Float?
  longitude    Float?
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
  @@map("locations")
}

model RestaurantPhoto {
  id           String     @id @default(cuid())
  url          String
  caption      String?
  sortOrder    Int        @default(0)
  type         PhotoType  @default(INTERIOR)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
  @@map("restaurant_photos")
}

model PaymentInfo {
  id               String     @id @default(cuid())
  stripeCustomerId String?
  stripeAccountId  String?
  bankAccountLast4 String?
  cardLast4        String?
  isVerified       Boolean    @default(false)
  restaurantId     String     @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
  @@map("payment_info")
}

model WorkerProfile {
  id                String             @id @default(cuid())
  bio               String?
  experience        String?            // Keep for backward compatibility
  skills            String[]           // Keep for backward compatibility
  hourlyRate        Float?
  availability      String?            // Keep for backward compatibility
  userId            String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  profilePictureUrl String?
  resumeUrl         String?            // Keep for backward compatibility
  
  // New fields
  title             String?
  yearsOfExperience Int?
  contactEmail      String?
  contactPhone      String?
  preferredContactMethod String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  
  user              User               @relation(fields: [userId], references: [id])
  applications      Application[]
  shiftAssignments  ShiftAssignment[]
  reviewsFromRestaurants ReviewWorker[]
  reviewsToRestaurants ReviewRestaurant[]
  workerSkills      WorkerSkill[]
  certifications    Certification[]
  documents         WorkerDocument[]

  @@map("worker_profiles")
}

model WorkerSkill {
  id              String        @id @default(cuid())
  name            String
  level           SkillLevel
  yearsExperience Int?
  workerProfileId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerProfile   WorkerProfile @relation(fields: [workerProfileId], references: [id], onDelete: Cascade)

  @@index([workerProfileId])
  @@map("worker_skills")
}

model Certification {
  id              String        @id @default(cuid())
  name            String
  issuer          String
  issueDate       DateTime
  expiryDate      DateTime?
  documentUrl     String?
  workerProfileId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerProfile   WorkerProfile @relation(fields: [workerProfileId], references: [id], onDelete: Cascade)

  @@index([workerProfileId])
  @@map("certifications")
}

model WorkerDocument {
  id              String        @id @default(cuid())
  name            String
  type            DocumentType
  fileUrl         String
  fileSize        Int?
  uploadDate      DateTime      @default(now())
  workerProfileId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerProfile   WorkerProfile @relation(fields: [workerProfileId], references: [id], onDelete: Cascade)

  @@index([workerProfileId])
  @@map("worker_documents")
}

model Job {
  id              String            @id @default(cuid())
  title           String
  description     String
  requirements    String?
  hourlyRate      Float
  startDate       DateTime
  endDate         DateTime
  status          String            @default("ACTIVE")
  maxWorkers      Int               @default(1)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  restaurantId    String
  restaurant      Restaurant        @relation(fields: [restaurantId], references: [id])
  applications    Application[]
  shiftAssignments ShiftAssignment[]

  @@map("jobs")
}

model Application {
  id              String            @id @default(cuid())
  status          String            @default("PENDING")
  appliedAt       DateTime          @default(now())
  respondedAt     DateTime?
  responseNote    String?
  jobId           String
  workerId        String
  restaurantId    String
  coverLetterUrl  String?
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  restaurant      Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker          WorkerProfile     @relation(fields: [workerId], references: [id], onDelete: Cascade)
  messages        Message[]
  shiftAssignment ShiftAssignment?

  @@unique([jobId, workerId])
  @@map("applications")
}

model ShiftAssignment {
  id            String        @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  status        String        @default("SCHEDULED")
  notes         String?
  applicationId String        @unique
  jobId         String
  workerId      String
  restaurantId  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  job           Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker        WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("shift_assignments")
}

model ReviewWorker {
  id           String        @id @default(cuid())
  rating       Int
  comment      String?
  isPublic     Boolean       @default(true)
  workerId     String
  restaurantId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker       WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("reviews_worker")
}

model ReviewRestaurant {
  id           String        @id @default(cuid())
  rating       Int
  comment      String?
  isPublic     Boolean       @default(true)
  workerId     String
  restaurantId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  worker       WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("reviews_restaurant")
}

model Message {
  id            String      @id @default(cuid())
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  senderId      String
  recipientId   String
  applicationId String?
  sender        User        @relation("SentMessages", fields: [senderId], references: [id])
  recipient     User        @relation("ReceivedMessages", fields: [recipientId], references: [id])
  application   Application? @relation(fields: [applicationId], references: [id])

  @@map("messages")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data specific to notification type
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

model NotificationPreference {
  id                 String   @id @default(cuid())
  userId             String   @unique
  inAppEnabled       Boolean  @default(true)
  emailEnabled       Boolean  @default(true)
  pushEnabled        Boolean  @default(true)
  applicationUpdates Boolean  @default(true)
  messages           Boolean  @default(true)
  jobPostings        Boolean  @default(true)
  shiftReminders     Boolean  @default(true)
  reviewsAndRatings  Boolean  @default(true)
  paymentUpdates     Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model NotificationDevice {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String   // "ios", "android", "web"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notification_devices")
}

// New models for Training System
model TrainingModule {
  id                  String            @id @default(cuid())
  title               String
  description         String
  order               Int
  isRequired          Boolean           @default(true)
  estimatedTimeMinutes Int
  targetRole          Role
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  materials           TrainingMaterial[]
  progress            TrainingProgress[]
  
  // Self-relation for prerequisites
  prerequisites       TrainingModule[]  @relation("ModulePrerequisites")
  requiredFor         TrainingModule[]  @relation("ModulePrerequisites")

  @@map("training_modules")
}

model TrainingMaterial {
  id                  String            @id @default(cuid())
  title               String
  description         String
  type                MaterialType
  content             String            // URL or JSON content
  order               Int
  estimatedTimeMinutes Int
  moduleId            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  module              TrainingModule    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress            TrainingProgress[]

  @@index([moduleId])
  @@map("training_materials")
}

model TrainingProgress {
  id                  String            @id @default(cuid())
  userId              String
  materialId          String
  moduleId            String
  status              ProgressStatus    @default(NOT_STARTED)
  score               Int?              // For quizzes
  startedAt           DateTime?
  completedAt         DateTime?
  lastAccessedAt      DateTime?
  timeSpentMinutes    Int               @default(0)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  material            TrainingMaterial  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  module              TrainingModule    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, materialId])
  @@index([userId])
  @@index([materialId])
  @@index([moduleId])
  @@map("training_progress")
}

enum Role {
  ADMIN
  RESTAURANT_OWNER
  WORKER
}

enum PhotoType {
  LOGO
  EXTERIOR
  INTERIOR
  FOOD
  STAFF
  OTHER
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum DocumentType {
  RESUME
  CERTIFICATE
  ID
  WORK_PERMIT
  REFERENCE
  OTHER
}

enum NotificationType {
  APPLICATION_STATUS
  NEW_APPLICATION
  NEW_MESSAGE
  NEW_JOB
  SHIFT_REMINDER
  SHIFT_ASSIGNED
  PAYMENT_UPDATE
  NEW_REVIEW
  SYSTEM_ALERT
  PROFILE_VIEW
}

enum MaterialType {
  VIDEO
  DOCUMENT
  QUIZ
  INTERACTIVE
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}